name: Deploy to Main Project

on:
  push:
    branches: [ "main", "master" ]

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Send deployment start notification
      shell: cmd
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=6135147194" -d "text=DEPLOYMENT STARTED | Repository: ${{ github.repository }} | Author: ${{ github.actor }} | Target: Main Project Directory"
        
    - name: Show current and target directories
      shell: cmd
      run: |
        echo GitHub Actions workspace:
        cd
        echo Files in workspace:
        dir
        echo.
        echo Target main project directory:
        echo C:\Users\Nordic\WebstormProjects\docflow-pro
        
    - name: Copy files to main project
      shell: cmd
      run: |
        echo Copying updated files to main project...
        set main_project=C:\Users\Nordic\WebstormProjects\docflow-pro
        
        echo Copying source files...
        xcopy /E /Y /Q . "%main_project%\" >NUL 2>&1
        
        if %errorlevel% equ 0 (
          echo Files successfully copied to main project
        ) else (
          echo Failed to copy files
          exit /b 1
        )
        
    - name: Deploy in main project directory
      shell: cmd
      run: |
        echo Switching to main project directory...
        cd "C:\Users\Nordic\WebstormProjects\docflow-pro"
        
        echo Current directory:
        cd
        
        echo [1/6] Git info in main project...
        git log -1 --pretty=format:"Son'gi commit: %%h - %%s (%%an, %%ar)"
        echo.
        
        echo [2/6] Check package.json...
        if exist "package.json" (
          echo Node.js project found
          type package.json | findstr "name\|version\|scripts"
        ) else (
          echo No package.json found
        )
        
        echo [3/6] Clean and install dependencies...
        if exist "package.json" (
          if exist "node_modules" rmdir /s /q node_modules
          if exist "package-lock.json" del package-lock.json
          if exist ".next" rmdir /s /q .next
          
          npm cache clean --force
          npm install --force
          
          if %errorlevel% equ 0 (
            echo npm install successful
          ) else (
            echo npm install failed
            exit /b 1
          )
        )
        
        echo [4/6] Build project...
        if exist "package.json" (
          npm run build
          if %errorlevel% equ 0 (
            echo Build successful
          ) else (
            echo Build failed, continuing...
          )
        )
        
        echo [5/6] Check server status...
        netstat -an | findstr ":3000"
        if %errorlevel% equ 0 (
          echo Server already running on port 3000
        ) else (
          echo Starting server on port 3000...
          start /b cmd /c "npm run start > server.log 2>&1"
          timeout /t 3 /nobreak >nul
          echo Server started in background
        )
        
        echo [6/6] Deployment completed in main project!
        
    - name: Send success notification
      if: success()
      shell: cmd
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=6135147194" -d "text=DEPLOYMENT SUCCESS | Repository: ${{ github.repository }} | Author: ${{ github.actor }} | Target: Main Project | Status: Files copied + npm install + build + server started | Time: %date% %time%"
        
    - name: Send failure notification
      if: failure()
      shell: cmd
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=6135147194" -d "text=DEPLOYMENT FAILED | Repository: ${{ github.repository }} | Author: ${{ github.actor }} | Target: Main Project | Check logs for details | Time: %date% %time%"
